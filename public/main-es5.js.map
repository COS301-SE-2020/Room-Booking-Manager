{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/add-meeting-room-info/add-meeting-room-info.component.ts","webpack:///src/app/add-meeting-room-info/add-meeting-room-info.component.html","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/classes/room.ts","webpack:///src/app/classes/user.ts","webpack:///src/app/dashboard/dashboard.component.ts","webpack:///src/app/dashboard/dashboard.component.html","webpack:///src/app/edit-employee/edit-employee.component.ts","webpack:///src/app/edit-employee/edit-employee.component.html","webpack:///src/app/edit-meeting-room-info/edit-meeting-room-info.component.ts","webpack:///src/app/edit-meeting-room-info/edit-meeting-room-info.component.html","webpack:///src/app/employee-info/employee-info.component.ts","webpack:///src/app/employee-info/employee-info.component.html","webpack:///src/app/login/login.component.ts","webpack:///src/app/login/login.component.html","webpack:///src/app/material/material.module.ts","webpack:///src/app/meeting-info/meeting-info.component.ts","webpack:///src/app/meeting-info/meeting-info.component.html","webpack:///src/app/register-confirm/register-confirm.component.ts","webpack:///src/app/register-confirm/register-confirm.component.html","webpack:///src/app/register/register.component.ts","webpack:///src/app/register/register.component.html","webpack:///src/app/retrieve-meeting-room-info/retrieve-meeting-room-info.component.ts","webpack:///src/app/retrieve-meeting-room-info/retrieve-meeting-room-info.component.html","webpack:///src/app/services/api.service.ts","webpack:///src/app/services/employee.service.ts","webpack:///src/app/services/rooms.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AddMeetingRoomInfoComponent","_router","apiDB","dialogRef","amenityList","floorNumbers","buildingList","RoomInfo","RoomNumber","required","pattern","FloorNumber","Amenity","NrSeats","RoomName","Building","Distance","localStorage","getItem","console","log","controls","value","formData","roomNumber","maxSeats","isExternal","rID","concat","dist","RoomID","DistanceFromElevator","includes","Whiteboard","Projector","Monitor","post","subscribe","data","onClose","done","close","onSubmit","cancel","selector","templateUrl","styleUrls","routes","path","component","children","AppRoutingModule","forRoot","imports","AppComponent","title","setItem","AppModule","declarations","providers","bootstrap","entryComponents","Room","User","DashboardComponent","_isAdmin","retrieveMeetings","navigate","logout","EditEmployeeComponent","mUser","rad_admin","EmpInfo","firstname","lastname","email","roomID","password","admin","adminChosen","getUser","isAdmin","setValue","FirstName","LastName","EmpEmail","LocationID","EmpPassword","updateEmployee","myUser","get","updateE","EditMeetingRoomInfoComponent","mRoom","getRoom","amenities","split","updateRoom","myRoom","updateR","EmployeeInfoComponent","dialog","renderer2","getUsers","listEmployees","fName","lName","location","confirm","ngOnInit","setEmp","editDialog","backdropClass","open","deleteUser","window","reload","_user","LoginComponent","_apiService","hide","form","username","registerForm","userID","officeID","myForm","_exist","buttonLogin","buttonReg","configDialog","tab","users","warn","_username","_password","i","length","_match","_admin","reset","MaterialModule","MeetingInfoComponent","newList","getMeetings","listMeetings","user","forEach","element","Organizer","found","push","myMeetings","RegisterConfirmComponent","submit","RegisterComponent","roomNum","floorNumber","building","distance","registerUser","onRegister","RetrieveMeetingRoomInfoComponent","getRooms","listComments","nativeElement","floorNum","numParticipants","roomName","is_External","is_Available","setRoom","_room","onCreate","apiService","httpclient","body","table","request","postedData","obj","empService","roomsService","environment","production","bootstrapModule","err","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component, OnInit, Inject } from '@angular/core';\r\nimport {FormGroup,FormControl,Validators} from '@angular/forms';\r\nimport { apiService } from '../services/api.service';\r\nimport {Room} from '../classes/room';\r\n//import { MatDialogRef,MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { Router } from '@angular/router';\r\nimport { concat } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-add-meeting-room-info',\r\n  templateUrl: './add-meeting-room-info.component.html',\r\n  styleUrls: ['./add-meeting-room-info.component.css']\r\n})\r\nexport class AddMeetingRoomInfoComponent implements OnInit {\r\n\r\n  //constructor(private apiDB: apiService,public dialogRef:MatDialogRef<AddMeetingRoomInfoComponent>,@Inject(MAT_DIALOG_DATA) public data: any) { }\r\n  constructor(private _router: Router,private apiDB: apiService,public dialogRef:MatDialogRef<AddMeetingRoomInfoComponent>) { }\r\n  \r\n  amenityList: string[] = ['Projector', 'Whiteboard', 'Monitor', 'Polycom Telephone'];\r\n  floorNumbers: string[] = ['1','2','3','4','5','6','7','8'];\r\n  buildingList: string[] = ['A','B','C','D'];\r\n  RoomInfo=new FormGroup({\r\n    RoomNumber:new FormControl('',[Validators.required,Validators.pattern(\"^[0-9]*$\")]),\r\n    FloorNumber:new FormControl(''),\r\n    Amenity:new FormControl(''),\r\n    NrSeats:new FormControl('',[Validators.required,Validators.pattern(\"^[0-9]*$\")]),\r\n    RoomName:new FormControl('',[Validators.required]),\r\n    Building:new FormControl(''),\r\n    Distance:new FormControl('',[Validators.required,Validators.pattern(\"^[0-9]*$\")])\r\n  });\r\n  ngOnInit(): void {\r\n    if(localStorage.getItem('loggedIn') == \"false\")\r\n    {\r\n      // this._router.navigate(['login']);\r\n    }\r\n  }\r\n\r\n  onSubmit(){\r\n    console.log(\"no seats\",this.RoomInfo.controls['Amenity'].value);\r\n    var formData=new Room();\r\n    \r\n    var roomNumber =<string><any>this.RoomInfo.controls['RoomNumber'].value;\r\n    formData.Amenity=<string><any>this.RoomInfo.controls['Amenity'].value;\r\n    formData.FloorNumber=<number><any>this.RoomInfo.controls['FloorNumber'].value;\r\n    formData.RoomName=<string><any>this.RoomInfo.controls['RoomName'].value;\r\n    formData.maxSeats=<number><any>this.RoomInfo.controls['NrSeats'].value;\r\n    formData.Building = <number><any>this.RoomInfo.controls['Building'].value;\r\n    \r\n    // formData.isAvailable = true;\r\n    formData.isExternal = false;\r\n    var rID = (<string><any>formData.FloorNumber).concat(<string><any>formData.Building);\r\n    rID = rID.concat(roomNumber);\r\n    var dist = <number><any>this.RoomInfo.controls['Distance'].value;\r\n    formData.RoomID = rID;\r\n    formData.DistanceFromElevator = dist;\r\n    console.log(\"Room ID- \" + rID + \"; distance from elevator- \" + dist);\r\n    if(formData.Amenity.includes(\"Whiteboard\"))\r\n    {\r\n      formData.Whiteboard = true;\r\n    }\r\n    else\r\n    {\r\n      formData.Whiteboard = false;\r\n    }\r\n    if(formData.Amenity.includes(\"Projector\"))\r\n    {\r\n      formData.Projector = true;\r\n    }\r\n    else\r\n    {\r\n      formData.Projector = false;\r\n    }\r\n    if(formData.Amenity.includes(\"Monitor\"))\r\n    {\r\n      formData.Monitor = true;\r\n    }\r\n    else\r\n    {\r\n      formData.Monitor = false;\r\n    }\r\n\r\n    console.log(formData);\r\n    this.apiDB.post(formData)\r\n    .subscribe(\r\n      data=>{\r\n        console.log('Response post', data);\r\n      }\r\n    );\r\n    // console.warn(this.RoomInfo.value)\r\n    // console.log(this.RoomInfo.controls['RoomNumber'].value);//individual values\r\n    //from here send json format to the DB \r\n    this.onClose();\r\n    this.done();\r\n  }\r\n  onClose(){\r\n    this.dialogRef.close();\r\n  }\r\n  cancel(){\r\n    this.onClose();\r\n  }\r\n  done(){\r\n    // window.location.reload();\r\n  }\r\n\r\n}\r\n","<div class=\"wrapper\">\r\n    <!-- <div class=\"_head\"> -->\r\n    <h1>Enter the Meeting Room details below</h1>\r\n    <!-- </div> -->\r\n      <form [formGroup]=\"RoomInfo\" (ngSubmit)=\"onSubmit()\">\r\n          <mat-form-field color=\"accent\">\r\n            <mat-label>Room Number</mat-label>\r\n            <input formControlName=\"RoomNumber\" matInput>\r\n            <!-- mat-error is for validation -->\r\n            <mat-error *ngIf=\"RoomInfo.controls['RoomNumber'].hasError('required')\">\r\n              Room Number is required\r\n            </mat-error>\r\n            <mat-error *ngIf=\"RoomInfo.controls['RoomNumber'].hasError('pattern')\">\r\n              please enter a valid integer\r\n            </mat-error>\r\n          </mat-form-field>\r\n          <br/>\r\n\r\n          <mat-form-field color=\"accent\">\r\n            <mat-label>Room Name</mat-label>\r\n            <input formControlName=\"RoomName\" matInput>\r\n            <mat-error *ngIf=\"RoomInfo.controls['RoomName'].hasError('required')\">\r\n              Room Name is <strong>required</strong>\r\n            </mat-error>\r\n            <!-- <mat-error *ngIf=\"RoomInfo.controls['Distance'].hasError('pattern')\">\r\n              please enter a valid integer\r\n            </mat-error> -->\r\n          </mat-form-field>\r\n          <br/>\r\n\r\n          <mat-form-field color=\"accent\">\r\n            <mat-label>Floor Number</mat-label>\r\n            <mat-select formControlName=\"FloorNumber\">\r\n              <mat-option style=\"color:black\" *ngFor=\"let floors of floorNumbers\" [value]=\"floors\" >{{floors}}</mat-option>\r\n            </mat-select>\r\n          </mat-form-field>\r\n          <br/>\r\n\r\n          <mat-form-field color=\"accent\">\r\n            <mat-label>Amenities</mat-label>\r\n            <mat-select formControlName=\"Amenity\" multiple>\r\n              <mat-option style=\"color:black\" *ngFor=\"let amenity of amenityList\" [value]=\"amenity\" >{{amenity}}</mat-option>\r\n            </mat-select>\r\n          </mat-form-field><br/>\r\n            \r\n          <mat-form-field color=\"accent\">\r\n            <mat-label>Number of seats</mat-label>\r\n            <input formControlName=\"NrSeats\" matInput>\r\n            <mat-error *ngIf=\"RoomInfo.controls['NrSeats'].hasError('required')\">\r\n              Number of seats is <strong>required</strong>\r\n            </mat-error>\r\n            <mat-error *ngIf=\"RoomInfo.controls['NrSeats'].hasError('pattern')\">\r\n              please enter a valid integer\r\n            </mat-error>\r\n          </mat-form-field>\r\n          <br/>\r\n\r\n          <mat-form-field color=\"accent\">\r\n            <mat-label>Building number</mat-label>\r\n            <mat-select formControlName=\"Building\">\r\n              <mat-option style=\"color:black\" *ngFor=\"let buildingNo of buildingList\" [value]=\"buildingNo\" >{{buildingNo}}</mat-option>\r\n            </mat-select>\r\n          </mat-form-field>\r\n          <br/>\r\n\r\n          <mat-form-field color=\"accent\">\r\n            <mat-label>Distance from elevator(in meters)</mat-label>\r\n            <input formControlName=\"Distance\" matInput>\r\n            <mat-error *ngIf=\"RoomInfo.controls['Distance'].hasError('required')\">\r\n              Distance is <strong>required</strong>\r\n            </mat-error>\r\n            <mat-error *ngIf=\"RoomInfo.controls['Distance'].hasError('pattern')\">\r\n              please enter a valid integer\r\n            </mat-error>\r\n          </mat-form-field>\r\n          <br/>\r\n\r\n          <!-- <mat-form-field color=\"accent\"> -->\r\n            <button id=\"submit\" class =\"btn btn-primary\" type=\"submit\" [disabled]=\"RoomInfo.invalid\" value=\"submit\">submit</button>&nbsp;\r\n            <button id=\"cancel\" class =\"btn btn-danger\" (click)=\"cancel()\">cancel</button>\r\n          <!-- </mat-form-field> -->\r\n      </form> \r\n    \r\n    \r\n    <!-- <div  ngbDropdown #myDrop=\"ngbDropdown\">\r\n        <button class=\"btn btn-outline-primary mr-2\" id=\"dropdownManual\" ngbDropdownAnchor (focus)=\"myDrop.open()\">Toggle dropdown</button>\r\n        <div ngbDropdownMenu aria-labelledby=\"dropdownManual\">\r\n          <button ngbDropdownItem>Action - 1</button>\r\n          <button ngbDropdownItem>Another Action</button>\r\n          <button ngbDropdownItem>Something else is here</button>\r\n        </div>\r\n      </div> -->\r\n    \r\n</div>","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { DashboardComponent } from './dashboard/dashboard.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { RetrieveMeetingRoomInfoComponent } from './retrieve-meeting-room-info/retrieve-meeting-room-info.component'\r\nimport { EmployeeInfoComponent } from './employee-info/employee-info.component';\r\nimport { MeetingInfoComponent } from './meeting-info/meeting-info.component';\r\n\r\n\r\nconst routes: Routes = \r\n[\r\n  {\r\n    path:'',\r\n    component:LoginComponent\r\n  },\r\n  {\r\n    path:'login',\r\n    component:LoginComponent\r\n  },\r\n  {\r\n    path:'dashboard',\r\n    component:DashboardComponent,\r\n    children: [\r\n      {path: 'employee-info', component: EmployeeInfoComponent},\r\n      {path: 'retrieve-meeting-room-info', component: RetrieveMeetingRoomInfoComponent},\r\n      {path: 'meeting-info', component: MeetingInfoComponent}\r\n      \r\n    ]\r\n  }\r\n  //,\r\n  // {\r\n  //   path:'retrieve-meeting-room-info',\r\n  //   component:RetrieveMeetingRoomInfoComponent\r\n  // }\r\n\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component } from '@angular/core';\r\n// import {FormGroup,FormControl,Validators} from '@angular/forms';\r\n// import { apiService } from './services/api.service';\r\n// import { Comments } from './classes/comments';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'Room Booking Manager';\r\n  constructor(private _router: Router){}\r\n  ngOnInit()\r\n  {\r\n    localStorage.setItem('loggedIn', \"false\");\r\n    console.log(\"loca\" + localStorage.getItem('loggedIn'));\r\n  }\r\n  // constructor(private _apiService: apiService, private _router: Router){}\r\n  // form = new FormGroup({  \r\n  //   username: new FormControl('', Validators.required),  \r\n  //   password: new FormControl('', Validators.required),\r\n  //   // submit: new FormControl()\r\n  // });\r\n  // get username() {  \r\n  //   return this.form.get('username');  \r\n  // } \r\n  // get password() {  \r\n  //   return this.form.get('password');  \r\n  // } \r\n  \r\n  // lstcomments:Comments[];\r\n  // ngOnInit()\r\n  // {\r\n  //   this._apiService.getcomments()\r\n  //   .subscribe\r\n  //   (\r\n  //     data=>\r\n  //     {\r\n  //         this.lstcomments = data;//typecast data to list of comments \r\n  //         console.log(this.lstcomments);\r\n  //     }\r\n  //   )\r\n  //   this._router.navigate(['dashboard']);\r\n  // }\r\n  // _username:string;\r\n  // _password:string;\r\n  // _match:boolean;\r\n  // button = \"\";\r\n\r\n  // onSubmit() {\r\n  //   // TODO: Use EventEmitter with form value\r\n  //   console.warn(this.form.get('username').value);\r\n  //   console.warn(this.form.value);\r\n  //   this._username = this.form.get('username').value;\r\n  //   this._password = this.form.get('password').value;\r\n\r\n  //   for(let i = 0; i < this.lstcomments.length; i++) \r\n  //   {\r\n      \r\n  //     if(this.lstcomments[i].Username == this._username)\r\n  //     {\r\n  //       console.log(\"Found\");\r\n  //       if(this.lstcomments[i].Password == this._password)\r\n  //       {\r\n  //         console.log(\"Passwords match\");\r\n  //         this._match = true;\r\n  //         this._router.navigate(['dashboard']);\r\n  //       }\r\n  //       else\r\n  //       {\r\n  //         console.log(\"Wrong password!\");\r\n  //         this._match = false;\r\n  //         //this._router.navigate([`dashboard`]);\r\n  //       }\r\n  //     }\r\n  //   }\r\n  //   this.button = \"clicked\";\r\n  // }\r\n}\r\n","<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\r\n<!-- * * * * * * * * * * * The content below * * * * * * * * * * * -->\r\n<!-- * * * * * * * * * * is only a placeholder * * * * * * * * * * -->\r\n<!-- * * * * * * * * * * and can be replaced. * * * * * * * * * * * -->\r\n<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\r\n<!-- * * * * * * * * * Delete the template below * * * * * * * * * * -->\r\n<!-- * * * * * * * to get started with your project! * * * * * * * * -->\r\n<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\r\n\r\n<!-- <h1>{{title}}</h1> -->\r\n\r\n<router-outlet></router-outlet>\r\n\r\n<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\r\n<!-- * * * * * * * * * * * The content above * * * * * * * * * * * -->\r\n<!-- * * * * * * * * * * is only a placeholder * * * * * * * * * * -->\r\n<!-- * * * * * * * * * * and can be replaced. * * * * * * * * * * * -->\r\n<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\r\n<!-- * * * * * * * * * * End of Placeholder * * * * * * * * * * * -->\r\n<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\r\n\r\n\r\n\r\n","import { MaterialModule } from './material/material.module';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\n\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\r\n\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { apiService } from './services/api.service';\r\nimport { roomsService } from './services/rooms.service';\r\nimport { empService } from './services/employee.service';\r\n\r\nimport { DashboardComponent } from './dashboard/dashboard.component';\r\nimport { Route } from '@angular/compiler/src/core';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { RetrieveMeetingRoomInfoComponent } from './retrieve-meeting-room-info/retrieve-meeting-room-info.component';\r\nimport { AddMeetingRoomInfoComponent } from './add-meeting-room-info/add-meeting-room-info.component';\r\nimport { EditMeetingRoomInfoComponent } from './edit-meeting-room-info/edit-meeting-room-info.component';\r\nimport { NgMultiSelectDropDownModule } from 'ng-multiselect-dropdown';\r\nimport { RegisterComponent } from './register/register.component';\r\nimport { EmployeeInfoComponent } from './employee-info/employee-info.component';\r\nimport { EditEmployeeComponent } from './edit-employee/edit-employee.component';\r\nimport { MeetingInfoComponent } from './meeting-info/meeting-info.component';\r\nimport { RegisterConfirmComponent } from './register-confirm/register-confirm.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    DashboardComponent,\r\n    LoginComponent,\r\n    RetrieveMeetingRoomInfoComponent,\r\n    AddMeetingRoomInfoComponent,\r\n    EditMeetingRoomInfoComponent,\r\n    RegisterComponent,\r\n    EmployeeInfoComponent,\r\n    EditEmployeeComponent,\r\n    MeetingInfoComponent,\r\n    RegisterConfirmComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    BrowserAnimationsModule,\r\n    AppRoutingModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    NgbModule,\r\n    HttpClientModule,\r\n    MaterialModule,\r\n    NgMultiSelectDropDownModule.forRoot()\r\n  ],\r\n  providers: [apiService,roomsService,empService],\r\n  bootstrap: [AppComponent],\r\n  entryComponents:[AddMeetingRoomInfoComponent,EditMeetingRoomInfoComponent,RegisterComponent,EmployeeInfoComponent,EditEmployeeComponent]\r\n})\r\nexport class AppModule { }\r\n","export class Room\r\n{\r\n    RoomID:string\r\n    RoomName:string\r\n    FloorNumber:number\r\n    Amenity:string\r\n    maxSeats:number\r\n    isExternal:boolean\r\n    Building:number\r\n    Whiteboard:boolean\r\n    Projector:boolean\r\n    Monitor:boolean\r\n    // isAvailable:boolean\r\n    DistanceFromElevator:number\r\n}","export class User\r\n{\r\n    // EmployeeID:number\r\n    FirstName: string\r\n    LastName: string\r\n    EmpEmail: string\r\n    isAdmin: any\r\n    EmpPassword:string\r\n    LocationID:string\r\n    Distance:number\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-dashboard',\r\n  templateUrl: './dashboard.component.html',\r\n  styleUrls: ['./dashboard.component.css']\r\n})\r\nexport class DashboardComponent implements OnInit {\r\n\r\n  constructor(private _router: Router) { }\r\n\r\n  _isAdmin:boolean\r\n\r\n  ngOnInit(): void {\r\n    // this._router.navigate(['retrieve-meeting-room-info']);\r\n    if(localStorage.getItem('loggedIn') == \"false\")//\r\n    {\r\n      //this._router.navigate(['login']);\r\n    }\r\n    if(localStorage.getItem('admin') == \"true\")\r\n    {\r\n      this._isAdmin = true;\r\n      console.log(\"Admin\");\r\n    }\r\n    else\r\n    {\r\n      this._isAdmin = false;\r\n      console.log(\"Not admin\");\r\n    }\r\n   this.retrieveMeetings();\r\n  }\r\n\r\n  retrieveRooms():void\r\n  {\r\n    // this._router.navigate(['retrieve-meeting-room-info']);\r\n    this._router.navigate(['dashboard/retrieve-meeting-room-info']);\r\n  }\r\n  retrieveEmps():void\r\n  {\r\n    this._router.navigate(['dashboard/employee-info']);\r\n  }\r\n  retrieveMeetings():void\r\n  {\r\n    this._router.navigate(['dashboard/meeting-info']);\r\n  }\r\n  logout():void\r\n  {\r\n    localStorage.setItem('loggedIn', \"false\");\r\n    localStorage.setItem('admin',\"false\");\r\n    console.log(localStorage.getItem('loggedIn'));\r\n  }\r\n}\r\n","<nav>\r\n    <ul class=\"horizontal\">\r\n        <li><a class=\"active\" href=\"#home\">Room Booking Manager Dashboard</a></li>\r\n        <li id=\"logout\"><a (click)=\"logout()\" routerLink=\"\">Logout</a></li>\r\n    </ul>\r\n  </nav>\r\n  <div class=\"sidenav\">\r\n    <div id=sideLinks>\r\n      <a class=\"active\" *ngIf=\"_isAdmin\" (click)=\"retrieveMeetings()\">Scheduled Meetings</a>\r\n      <a class=\"active\" *ngIf=\"_isAdmin\" (click)=\"retrieveRooms()\" >Meeting Rooms</a>\r\n      <a class=\"active\" *ngIf=\"_isAdmin\"(click)=\"retrieveEmps()\">Employees</a>\r\n      <!-- <a *ngIf=\"_isAdmin\" href=\"#\">Set Rules</a> -->\r\n    </div>\r\n  </div>\r\n  <div id=\"routerPosition\">\r\n    <div id=\"toCenter\">\r\n      <router-outlet></router-outlet>\r\n    </div>\r\n  </div>\r\n","import { Component, OnInit,Inject } from '@angular/core';\r\nimport {FormGroup,FormControl, Validators} from '@angular/forms';\r\nimport { apiService } from '../services/api.service';\r\nimport { empService } from '../services/employee.service';\r\nimport {User} from '../classes/user';\r\n//import { MatDialogRef,MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-edit-employee',\r\n  templateUrl: './edit-employee.component.html',\r\n  styleUrls: ['./edit-employee.component.css']\r\n})\r\nexport class EditEmployeeComponent implements OnInit {\r\n\r\n  constructor(private _router: Router,private apiDB: apiService,public dialogRef:MatDialogRef<EditEmployeeComponent>,private mUser:empService) { }\r\n  get getUser():User\r\n  {\r\n    return this.mUser.myUser;\r\n  }\r\n  rad_admin: string[] = ['true', 'false'];\r\n  \r\n  EmpInfo=new FormGroup({\r\n    firstname:new FormControl('',[Validators.required]),\r\n    lastname:new FormControl('',[Validators.required]),\r\n    email:new FormControl('',[Validators.required]),\r\n    roomID:new FormControl('',[Validators.required]),\r\n    password:new FormControl('',[Validators.required]),\r\n    admin: new FormControl(',',[Validators.required])\r\n  });\r\n\r\n  get roomID() {  \r\n    return this.EmpInfo.get('roomID');  \r\n  } \r\n  get firstname() {  \r\n    return this.EmpInfo.get('firstname');  \r\n  } \r\n  get lastname() {  \r\n    return this.EmpInfo.get('lastname');  \r\n  } \r\n  get email() {  \r\n    return this.EmpInfo.get('email');  \r\n  } \r\n  get password() {  \r\n    return this.EmpInfo.get('password');  \r\n  } \r\n  get admin() {  \r\n    return this.EmpInfo.get('admin');  \r\n  } \r\n\r\n  adminChosen: string\r\n  ngOnInit(): void {\r\n\r\n    if(localStorage.getItem('loggedIn') == \"false\")\r\n    {\r\n      //this._router.navigate(['login']);\r\n    }\r\n    this.adminChosen = <string><any>this.getUser.isAdmin;\r\n    this.EmpInfo.controls['firstname'].setValue(this.getUser.FirstName);\r\n    this.EmpInfo.controls['lastname'].setValue(this.getUser.LastName);\r\n    this.EmpInfo.controls['email'].setValue(this.getUser.EmpEmail);\r\n    this.EmpInfo.controls['roomID'].setValue(this.getUser.LocationID);\r\n    this.EmpInfo.controls['password'].setValue(this.getUser.EmpPassword);\r\n    this.EmpInfo.controls['admin'].setValue(this.adminChosen);\r\n    \r\n    console.log(this.adminChosen);\r\n  }\r\n  updateE(){\r\n    var formData=new User();\r\n    formData.FirstName = <string><any>this.EmpInfo.controls['firstname'].value;\r\n    formData.LastName = <string><any>this.EmpInfo.controls['lastname'].value;\r\n    formData.EmpEmail = <string><any>this.EmpInfo.controls['email'].value;\r\n    formData.LocationID = <string><any>this.EmpInfo.controls['roomID'].value;\r\n    formData.EmpPassword = <string><any>this.EmpInfo.controls['password'].value;\r\n    formData.isAdmin = <boolean><any>this.EmpInfo.controls['admin'].value;\r\n    console.log(formData);\r\n    this.apiDB.updateEmployee(formData)\r\n    .subscribe(\r\n      data=>{\r\n        console.log('Response post', data);\r\n      }\r\n    );\r\n    this.cancel();\r\n    this.done();\r\n\r\n  }\r\n  onClose(){\r\n    this.dialogRef.close();\r\n    //window.location.reload();\r\n  }\r\n  cancel(){\r\n    this.onClose();\r\n  }\r\n  done(){\r\n    //window.location.reload();\r\n  }\r\n}\r\n","<div class=\"wrapper\">\r\n  <!-- <div class=\"_head\"> -->\r\n  <h1>Enter the Employee details below</h1>\r\n  <!-- </div> -->\r\n    <form [formGroup]=\"EmpInfo\" (ngSubmit)=\"updateE()\">\r\n        <mat-form-field color=\"accent\" class=\"field\">\r\n            <mat-label>First Name</mat-label>\r\n            <input formControlName=\"firstname\" matInput required>\r\n            <!-- mat-error is for validation -->\r\n            <mat-error *ngIf=\"EmpInfo.get('firstname').touched && EmpInfo.get('firstname').invalid\">\r\n                First Name is <strong>required</strong>\r\n            </mat-error>\r\n        </mat-form-field>\r\n        &nbsp;&nbsp;\r\n        <mat-form-field color=\"accent\" class=\"field\">\r\n            <mat-label>Last Name</mat-label>\r\n            <input formControlName=\"lastname\" matInput required>\r\n            <!-- mat-error is for validation -->\r\n            <mat-error *ngIf=\"EmpInfo.get('lastname').touched && EmpInfo.get('lastname').invalid\">\r\n                Last Name is <strong>required</strong>\r\n            </mat-error>\r\n        </mat-form-field>   \r\n        <br/>\r\n        <mat-form-field color=\"accent\" class=\"field\">\r\n            <mat-label>Email</mat-label>\r\n            <input formControlName=\"email\" matInput required>\r\n            <!-- mat-error is for validation -->\r\n            <mat-error *ngIf=\"EmpInfo.get('email').touched && EmpInfo.get('email').invalid\">\r\n                Email is <strong>required</strong>\r\n            </mat-error>\r\n        </mat-form-field>\r\n        &nbsp;&nbsp;\r\n        <mat-form-field color=\"accent\" class=\"field\">\r\n            <mat-label>Password</mat-label>\r\n            <input formControlName=\"password\" matInput required>\r\n            <!-- mat-error is for validation -->\r\n            <mat-error *ngIf=\"EmpInfo.get('password').touched && EmpInfo.get('password').invalid\">\r\n                Password is <strong>required</strong>\r\n            </mat-error>\r\n        </mat-form-field>\r\n        <br/>\r\n        <mat-form-field color=\"accent\" class=\"field\">\r\n            <mat-label>Room ID</mat-label>\r\n            <input formControlName=\"roomID\" matInput required>\r\n            <!-- mat-error is for validation -->\r\n            <mat-error *ngIf=\"EmpInfo.get('roomID').touched && EmpInfo.get('roomID').invalid\">\r\n                Room ID is <strong>required</strong>\r\n            </mat-error>\r\n        </mat-form-field>\r\n        &nbsp;&nbsp;\r\n        <mat-form-field color=\"accent\" class=\"field\">\r\n            <mat-label>Admin</mat-label>\r\n            <mat-select formControlName=\"admin\" [(ngModel)]=\"adminChosen\" >\r\n                <mat-option style=\"color:black\" *ngFor=\"let admin of rad_admin\" [value]=\"admin\" >{{admin}}</mat-option>\r\n            </mat-select>\r\n        </mat-form-field>\r\n        <div class=\"form-group col-md-12\">\r\n            <button class=\"btn btn-primary\" [disabled]=\"EmpInfo.get('firstname').invalid || EmpInfo.get('lastname').invalid || EmpInfo.get('email').invalid || EmpInfo.get('password').invalid || EmpInfo.get('roomID').invalid || EmpInfo.get('admin').invalid\" type=\"submit\" >Submit</button>\r\n            &nbsp;&nbsp;\r\n            <button id=\"cancel\" class =\"btn btn-danger\" (click)=\"cancel()\">cancel</button>\r\n            <br/><br/>\r\n            <!-- <p *ngIf=\"buttonReg != '' && _exist\" class=\"alert alert-danger\"> \r\n                User with username already exists!           \r\n            </p>  -->\r\n        \r\n</div>\r\n","import { Component, OnInit, Inject } from '@angular/core';\r\nimport {FormGroup,FormControl, Validators} from '@angular/forms';\r\nimport { apiService } from '../services/api.service';\r\nimport { roomsService } from '../services/rooms.service';\r\nimport {Room} from '../classes/room';\r\n//import { MatDialogRef,MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { Router } from '@angular/router';\r\n\r\n\r\n@Component({\r\n  selector: 'app-edit-meeting-room-info',\r\n  templateUrl: './edit-meeting-room-info.component.html',\r\n  styleUrls: ['./edit-meeting-room-info.component.css']\r\n})\r\nexport class EditMeetingRoomInfoComponent implements OnInit {\r\n\r\n  constructor(private _router: Router,private apiDB: apiService,public dialogRef:MatDialogRef<EditMeetingRoomInfoComponent>,private mRoom:roomsService) { }\r\n  get getRoom():Room\r\n  {\r\n    return this.mRoom.myRoom;\r\n  }\r\n  amenityList: string[] = ['Projector', 'Whiteboard', 'Monitor', 'Polycom Telephone'];\r\n  RoomInfo=new FormGroup({\r\n    RoomNumber:new FormControl('',[Validators.required]),\r\n    FloorNumber:new FormControl('',[Validators.required,Validators.pattern(\"^[0-9]*$\")]),\r\n    Amenity:new FormControl(''),\r\n    NrSeats:new FormControl('',[Validators.required,Validators.pattern(\"^[0-9]*$\")]),\r\n    RoomName:new FormControl('',[Validators.required])\r\n  });\r\n  get RoomNumber() {  \r\n    return this.RoomInfo.get('RoomInfo');  \r\n  } \r\n  amenities:string[];\r\n  //am:any =[];\r\n  ngOnInit(): void {\r\n    if(localStorage.getItem('loggedIn') == \"false\")\r\n    {\r\n      //this._router.navigate(['login']);\r\n    }\r\n    console.log(\"here\");\r\n    console.log(this.getRoom.RoomName);\r\n    this.amenities = this.getRoom.Amenity.split(',');\r\n    // console.log(this.amenities);\r\n    // for(let i = 0; i < this.amenities.length; i++) \r\n    // {\r\n      \r\n    //   this.am.push({name:this.amenities[i]});\r\n    // }\r\n   // console.log('final-> '+ this.am[name]);\r\n    this.RoomInfo.controls['RoomNumber'].setValue(this.getRoom.RoomID);\r\n    this.RoomInfo.controls['FloorNumber'].setValue(this.getRoom.FloorNumber);\r\n    this.RoomInfo.controls['Amenity'].setValue(this.getRoom.Amenity);\r\n    this.RoomInfo.controls['NrSeats'].setValue(this.getRoom.maxSeats);\r\n    this.RoomInfo.controls['RoomName'].setValue(this.getRoom.RoomName);\r\n    //console.log(this.getRoom.Amenities + \" - \" + this.RoomInfo.controls['RoomNumber'].value);\r\n  }\r\n  \r\n  updateR(){\r\n    var formData=new Room();\r\n    formData.RoomID=<string><any>this.RoomInfo.controls['RoomNumber'].value;\r\n    formData.Amenity=<string><any>this.RoomInfo.controls['Amenity'].value;\r\n    formData.FloorNumber=<number><any>this.RoomInfo.controls['FloorNumber'].value;\r\n    formData.RoomName=<string><any>this.RoomInfo.controls['RoomName'].value;\r\n    formData.maxSeats=<number><any>this.RoomInfo.controls['NrSeats'].value;\r\n    formData.isExternal = this.getRoom.isExternal;\r\n    formData.Building = this.getRoom.Building;\r\n    formData.Whiteboard = this.getRoom.Whiteboard;\r\n    formData.Projector = this.getRoom.Projector;\r\n    formData.Monitor = this.getRoom.Monitor;\r\n    // formData.isAvailable = this.getRoom.isAvailable;\r\n    console.log(formData);\r\n    this.apiDB.updateRoom(formData)\r\n    .subscribe(\r\n      data=>{\r\n        console.log('Response post', data);\r\n      }\r\n    );\r\n    \r\n    // console.warn(this.RoomInfo.value)\r\n    // console.log(this.RoomInfo.controls['RoomNumber'].value);//individual values\r\n    //from here send json format to the DB \r\n    this.onClose();\r\n    this.done();\r\n  }\r\n  onClose(){\r\n    this.dialogRef.close();\r\n  }\r\n  cancel(){\r\n    this.onClose();\r\n  }\r\n  done(){\r\n    // window.location.reload();\r\n  }\r\n}\r\n","<div class=\"wrapper\">\r\n  <!-- <div class=\"_head\"> -->\r\n  <h1>Enter the Meeting Room details below</h1>\r\n  <!-- </div> -->\r\n    <form [formGroup]=\"RoomInfo\" (ngSubmit)=\"updateR()\">\r\n        <mat-form-field color=\"accent\">\r\n          <mat-label>Room Number*</mat-label>\r\n          <input formControlName=\"RoomNumber\" matInput>\r\n          <!-- mat-error is for validation -->\r\n          <mat-error *ngIf=\"RoomInfo.controls['RoomNumber'].hasError('required')\">\r\n            Room Number is <strong>required</strong>\r\n          </mat-error>\r\n        </mat-form-field>\r\n        <br/>\r\n\r\n        <mat-form-field color=\"accent\">\r\n          <mat-label>Room Name</mat-label>\r\n          <input formControlName=\"RoomName\" matInput>\r\n          <mat-error *ngIf=\"RoomInfo.controls['RoomName'].hasError('required')\">\r\n            Room Name is <strong>required</strong>\r\n          </mat-error>\r\n          <!-- <mat-error *ngIf=\"RoomInfo.controls['Distance'].hasError('pattern')\">\r\n            please enter a valid integer\r\n          </mat-error> -->\r\n        </mat-form-field>\r\n        <br/>\r\n\r\n        <mat-form-field color=\"accent\">\r\n          <mat-label>Floor Number</mat-label>\r\n          <input formControlName=\"FloorNumber\" matInput>\r\n          <mat-error *ngIf=\"RoomInfo.controls['FloorNumber'].hasError('required')\">\r\n            Floor number is <strong>required</strong>\r\n          </mat-error>\r\n        <mat-error *ngIf=\"RoomInfo.controls['FloorNumber'].hasError('pattern')\">\r\n          please enter a valid integer\r\n        </mat-error>\r\n        </mat-form-field>\r\n        <br/>\r\n\r\n        <mat-form-field color=\"accent\">\r\n          <mat-label>Amenities</mat-label>\r\n          <mat-select formControlName=\"Amenity\" multiple [(ngModel)]=\"amenities\"> \r\n            <mat-option style=\"color:black\" *ngFor=\"let amenity of amenityList\" [value]=\"amenity\" >{{amenity}}</mat-option>\r\n          </mat-select>\r\n        </mat-form-field><br/>\r\n          \r\n        <mat-form-field color=\"accent\">\r\n          <mat-label>Number of seats</mat-label>\r\n          <input formControlName=\"NrSeats\" matInput>\r\n          <mat-error *ngIf=\"RoomInfo.controls['NrSeats'].hasError('required')\">\r\n            Number of seats is <strong>required</strong>\r\n          </mat-error>\r\n          <mat-error *ngIf=\"RoomInfo.controls['NrSeats'].hasError('pattern')\">\r\n            please enter a valid integer\r\n          </mat-error>\r\n        </mat-form-field>\r\n        <br/>\r\n\r\n        <!-- <mat-form-field color=\"accent\"> -->\r\n          <button id=\"submit\" class =\"btn btn-primary\" type=\"submit\" [disabled]=\"RoomInfo.invalid\" value=\"submit\">submit</button>&nbsp;\r\n          <button id=\"cancel\" class =\"btn btn-danger\" (click)=\"cancel()\">cancel</button>\r\n        <!-- </mat-form-field> -->\r\n    </form> \r\n  \r\n  \r\n  <!-- <div  ngbDropdown #myDrop=\"ngbDropdown\">\r\n      <button class=\"btn btn-outline-primary mr-2\" id=\"dropdownManual\" ngbDropdownAnchor (focus)=\"myDrop.open()\">Toggle dropdown</button>\r\n      <div ngbDropdownMenu aria-labelledby=\"dropdownManual\">\r\n        <button ngbDropdownItem>Action - 1</button>\r\n        <button ngbDropdownItem>Another Action</button>\r\n        <button ngbDropdownItem>Something else is here</button>\r\n      </div>\r\n    </div> -->\r\n  \r\n</div>","import { MatDialog,MatDialogConfig } from '@angular/material/dialog';\r\nimport { Component, OnInit, AfterViewInit, ViewChild, Renderer2 } from '@angular/core';\r\nimport { apiService } from '../services/api.service';\r\nimport { empService } from '../services/employee.service';\r\nimport { EditEmployeeComponent } from '../edit-employee/edit-employee.component';\r\nimport { User } from '../classes/user';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-employee-info',\r\n  templateUrl: './employee-info.component.html',\r\n  styleUrls: ['./employee-info.component.css']\r\n})\r\nexport class EmployeeInfoComponent implements OnInit {\r\n  @ViewChild('data') data;\r\n  constructor(private _router: Router,private apiDB: apiService, private dialog:MatDialog, private renderer2:Renderer2, private mUser:empService) { }\r\n \r\n  set setEmp(_user:User)\r\n  {\r\n    this.mUser.myUser = _user;\r\n  }\r\n  listEmployees:User[];\r\n  ngOnInit(): void {\r\n    if(localStorage.getItem('loggedIn') == \"false\")\r\n    {\r\n      //this._router.navigate(['login']);\r\n    }\r\n    this.apiDB.getUsers()\r\n    .subscribe (\r\n      data=>{\r\n       this.listEmployees=data;//type casting into the  form listed in user.ts\r\n       console.log('Response2', data);\r\n      }\r\n\r\n    );\r\n  }\r\n\r\n  makeAdmin(fName:string,lName:string,email:string,location:string,password:string,)\r\n  {\r\n    if(confirm(`Are you sure you want to make ${fName} an admin?`))\r\n    { \r\n      var formData=new User();\r\n      formData.FirstName = fName;\r\n      formData.LastName = lName;\r\n      formData.EmpEmail = email;\r\n      formData.LocationID = location;\r\n      formData.EmpPassword = password;\r\n      formData.isAdmin = 1;\r\n\r\n      this.apiDB.updateEmployee(formData)\r\n    .subscribe(\r\n      data=>{\r\n       // console.log('Response post', data);\r\n      }\r\n    );\r\n        \r\n        this.ngOnInit();\r\n     \r\n      \r\n    }\r\n  }\r\n\r\n  RevokeAdmin(fName:string,lName:string,email:string,location:string,password:string,)\r\n  {\r\n    if(confirm(`Are you sure you want to remove ${fName}'s admin privilege?`))\r\n    { \r\n      var formData=new User();\r\n      formData.FirstName = fName;\r\n      formData.LastName = lName;\r\n      formData.EmpEmail = email;\r\n      formData.LocationID = location;\r\n      formData.EmpPassword = password;\r\n      formData.isAdmin = 0;\r\n\r\n      this.apiDB.updateEmployee(formData)\r\n    .subscribe(\r\n      data=>{\r\n        //console.log('Response post', data);\r\n      }\r\n    );\r\n        \r\n        this.ngOnInit();\r\n     \r\n      \r\n    }\r\n  }\r\n\r\n  edit(fName:string,lName:string,email:string,location:string,password:string,isAdmin:boolean)\r\n  {\r\n    var formData=new User();\r\n    formData.FirstName = fName;\r\n    formData.LastName = lName;\r\n    formData.EmpEmail = email;\r\n    formData.LocationID = location;\r\n    formData.EmpPassword = password;\r\n    formData.isAdmin = isAdmin;\r\n    this.setEmp = formData;\r\n    // this.apiDB.getRecord(formData)\r\n    // .subscribe(\r\n    //   data=>{\r\n    //     console.log('Response post', data);\r\n    //   });\r\n        //window.location.reload();\r\n        //this.ngOnInit();\r\n    const editDialog=new MatDialogConfig();\r\n    editDialog.backdropClass=\"backGround\";\r\n    // configDialog.width='700px';\r\n    // configDialog.height='400px';\r\n    this.dialog.open(EditEmployeeComponent,editDialog);\r\n  }\r\n\r\n  delete(id:string){\r\n    if(confirm(`Are you sure to delete Room number ${id}`)) {\r\n      console.log(\"Implement delete functionality here\");\r\n      var formData=new User();\r\n      formData.EmpEmail=id;\r\n      this.apiDB.deleteUser(formData)\r\n      .subscribe(\r\n        data=>{\r\n          console.log('Response post', data);\r\n        });\r\n        // window.location.reload();\r\n        //this.ngOnInit();\r\n    }\r\n    this.done();\r\n  }\r\n  done(){\r\n    window.location.reload();\r\n  }\r\n\r\n}\r\n","<h2>Employee Information</h2>\r\n<div >\r\n    \r\n    <div class=\"table-wrapper-scroll-y table-wrapper-scroll-x my-custom-scrollbar\">\r\n        <table class=\"table center tableRoom\">\r\n            <tr>\r\n                <th>First Name</th>\r\n                <th>Last Name</th>\r\n                <th>Email</th>\r\n                <th>Location</th>\r\n                <th>Admin</th>\r\n                <th>Admin Privilege Settings</th>\r\n            </tr>\r\n            <tr *ngFor=\"let user of listEmployees\">\r\n                <td attr.class=\"{{user.FirstName}}\">{{user.FirstName}}</td>\r\n                <td attr.class=\"{{user.LastName}}\">{{user.LastName}}</td>\r\n                <td attr.class=\"{{user.EmpEmail}}\">{{user.EmpEmail}}</td>\r\n                <td attr.class=\"{{user.LocationID}}\">{{user.LocationID}}</td>\r\n                <td attr.class=\"{{user.isAdmin}}\">\r\n                    <ng-template [ngIf]=\"user.isAdmin > 0\" [ngIfElse]=\"notAdmin\">\r\n                        yes\r\n                    </ng-template>\r\n                    <ng-template #notAdmin>\r\n                        no\r\n                    </ng-template>\r\n                 </td>\r\n                <!-- <td></td> -->\r\n                <td>\r\n                    <ng-template [ngIf]=\"user.EmpEmail == 'AdeleV@teamthreshold.onmicrosoft.com'\" [ngIfElse]=\"notAdel\">\r\n                        -\r\n                    </ng-template>\r\n                    <ng-template #notAdel>\r\n                        <ng-template  [ngIf]=\"user.isAdmin > 0\" [ngIfElse]=\"notA\">\r\n                            <button class=\"btn btn-danger\" id=\"b1\" (click)=\"RevokeAdmin(user.FirstName,user.LastName,user.EmpEmail,user.LocationID,user.EmpPassword)\">Revoke</button>\r\n                        </ng-template>\r\n                        <ng-template #notA>\r\n                            <button class=\"btn btn-primary\" id=\"b1\" (click)=\"makeAdmin(user.FirstName,user.LastName,user.EmpEmail,user.LocationID,user.EmpPassword)\">Make</button>\r\n                        </ng-template>\r\n                    </ng-template>\r\n                    \r\n                </td>\r\n                <!-- <td>\r\n                    <span>\r\n                        <button class=\"btn btn-danger\" id=\"b1\" (click)=\"delete(user.EmpEmail)\">Delete</button>\r\n                        <button class=\"btn btn-success\" (click)=\"edit(user.FirstName,user.LastName,user.EmpEmail,user.LocationID,user.EmpPassword,user.isAdmin)\">Edit</button>\r\n                         <button class=\"btn btn-primary\" >Assign Admin</button>&nbsp; -\r\n                    </span>\r\n                </td> -->\r\n            </tr>\r\n        \r\n        </table>\r\n    </div>\r\n</div>\r\n","import { RegisterComponent } from './../register/register.component';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport {FormGroup,FormControl,Validators} from '@angular/forms';\r\nimport { apiService } from '../services/api.service';\r\nimport { Comments } from '../classes/comments';\r\nimport { User } from '../classes/user';\r\nimport { Router } from '@angular/router';\r\nimport { MatDialog,MatDialogConfig } from '@angular/material/dialog';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n\r\n  hide = true;\r\n  \r\n  constructor(private _apiService: apiService, private _router: Router,private dialog:MatDialog){}\r\n  form = new FormGroup({  \r\n    username: new FormControl('', Validators.required),  \r\n    password: new FormControl('', Validators.required),\r\n    // submit: new FormControl()\r\n  });\r\n\r\n  register(){\r\n    const configDialog=new MatDialogConfig();\r\n    configDialog.backdropClass=\"backGround\";\r\n    // configDialog.width='700px';\r\n    // configDialog.height='400px';\r\n    this.dialog.open(RegisterComponent ,configDialog);\r\n  }\r\n  get username() {  \r\n    return this.form.get('username');  \r\n  } \r\n  get password() {  \r\n    return this.form.get('password');  \r\n  } \r\n\r\n  registerForm = new FormGroup({  \r\n    userID: new FormControl('', Validators.required),\r\n    firstname: new FormControl('', Validators.required),  \r\n    lastname: new FormControl('', Validators.required),\r\n    email: new FormControl('', Validators.required),\r\n    officeID: new FormControl('', Validators.required),\r\n    // submit: new FormControl()\r\n  });\r\n  get userID() {  \r\n    return this.registerForm.get('userID');  \r\n  } \r\n  get firstname() {  \r\n    return this.registerForm.get('firstname');  \r\n  } \r\n  get lastname() {  \r\n    return this.registerForm.get('lastname');  \r\n  } \r\n  get email() {  \r\n    return this.registerForm.get('email');  \r\n  } \r\n  get officeID() {  \r\n    return this.registerForm.get('officeID');  \r\n  } \r\n  \r\n  //lstcomments:Comments[];\r\n  users:User[];\r\n  myForm = \"login\";\r\n  tab:string;\r\n  ngOnInit()\r\n  {\r\n    //this._router.navigate(['dashboard']);\r\n    this.tab = \"Register\";\r\n    this.myForm = \"login\";\r\n    // this._apiService.getcomments()\r\n    // .subscribe\r\n    // (\r\n    //   data=>\r\n    //   {\r\n    //       this.lstcomments = data;//typecast data to list of comments \r\n    //       console.log(this.lstcomments);\r\n    //   }\r\n    // )\r\n\r\n    this._apiService.getUsers()\r\n    .subscribe\r\n    (\r\n      data=>\r\n      {\r\n          this.users = data;//typecast data to list of comments \r\n          console.log(this.users);\r\n      }\r\n    )\r\n   \r\n  }\r\n  \r\n  switch()\r\n  {\r\n    if(this.myForm == \"login\")\r\n    {\r\n      this.myForm = \"register\";\r\n      this.tab = \"Login\";\r\n    }\r\n    else if(this.myForm == \"register\")\r\n    {\r\n      this.myForm = \"login\";\r\n      this.tab = \"Register\";\r\n    }\r\n  }\r\n  _username:string;\r\n  _password:string;\r\n  _match:boolean;\r\n  _exist = false;\r\n  _admin:string\r\n  buttonLogin = \"\";\r\n  buttonReg = \"\";\r\n\r\n  onSubmit() \r\n  {\r\n    // TODO: Use EventEmitter with form value\r\n    console.warn(this.form.get('username').value);\r\n    console.warn(this.form.value);\r\n    this._username = this.form.get('username').value;\r\n    this._password = this.form.get('password').value;\r\n\r\n    for(let i = 0; i < this.users.length; i++) \r\n    {\r\n      \r\n      if(this.users[i].EmpEmail == this._username)\r\n      {\r\n        console.log(\"Found\");\r\n        if(this.users[i].EmpPassword == this._password)\r\n        {\r\n          console.log(\"Passwords match\");\r\n          this._match = true;\r\n          localStorage.setItem('loggedIn', \"true\");\r\n          localStorage.setItem('username',this.users[i].FirstName + \" \" + this.users[i].LastName);\r\n          if(this.users[i].isAdmin)\r\n          {\r\n            this._admin = \"true\";\r\n          }\r\n          else\r\n          {\r\n            this._admin = \"false\";\r\n          }\r\n          //this._admin = <string><any>this.users[i].isAdmin;\r\n          localStorage.setItem('admin',this._admin)\r\n          console.log(localStorage.getItem('admin'));\r\n          this._router.navigate(['dashboard']);\r\n        }\r\n        else\r\n        {\r\n          console.log(\"Wrong password!\");\r\n          this._match = false;\r\n          this.password.reset();\r\n          //this._router.navigate([`dashboard`]);\r\n        }\r\n      }\r\n    }\r\n    this.buttonLogin = \"clicked\";\r\n  }\r\n\r\n  // onRegister()\r\n  // {\r\n    \r\n   \r\n  //   for(let i = 0; i < this.users.length; i++) \r\n  //   {\r\n      \r\n  //     if(this.users[i].userID == this.registerForm.get('userID').value)\r\n  //     {\r\n  //       this._exist = true;\r\n  //     }\r\n  //   }\r\n\r\n  //   if(!this._exist)\r\n  //   {\r\n  //     var formData=new User();\r\n  //       formData.userID=this.registerForm.get('userID').value;\r\n  //       formData.FirstName=this.registerForm.get('firstname').value;\r\n  //       formData.LastName=this.registerForm.get('lastname').value;\r\n  //       formData.Email=this.registerForm.get('email').value;\r\n  //       formData.officeRoomID=this.registerForm.get('officeID').value;\r\n        \r\n\r\n  //       this._apiService.registerUser(formData)\r\n  //       .subscribe(\r\n  //         data=>{\r\n  //           console.log('Response post', data);\r\n  //         }\r\n  //       );\r\n         \r\n  //       this._router.navigate(['dashboard']);\r\n  //   }\r\n  //   this.buttonReg =\"clicked\";\r\n  // }\r\n\r\n}\r\n","<!-- <body> -->\r\n <!-- <section id=\"cover\" class=\"min-vh-100\"> -->\r\n   <h1>Room Booking Manager</h1>\r\n    <div class=\"wrapper\">\r\n      <!-- <div class=\"row text-white\"> -->\r\n        \r\n        <div id=\"formContent\" class=\"col-xl-5 col-lg-6 col-md-8 col-sm-10 mx-auto text-center form p-4\" [ngSwitch]=\"myForm\">\r\n          <div *ngSwitchCase=\"'login'\">\r\n            <!-- <div class=\"px-2\"> -->\r\n              <h2 id=\"lable\">Log in</h2>\r\n              <form  [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n                <mat-form-field color=\"accent\" class=\"field\">\r\n                  <mat-label>email</mat-label>\r\n                  <input formControlName=\"username\" matInput required>\r\n                  <!-- mat-error is for validation -->\r\n                  <mat-error *ngIf=\"form.get('username').touched && form.get('username').invalid\">\r\n                    email is <strong>required</strong>\r\n                  </mat-error>\r\n                </mat-form-field>\r\n              <br/>\r\n                <mat-form-field color=\"accent\" class=\"field\">\r\n                  <mat-label>password</mat-label>\r\n                  <input formControlName=\"password\" matInput required [type]=\"hide ? 'password' : 'text'\">\r\n                  <mat-error *ngIf=\"form.get('password').touched && form.get('password').invalid\">\r\n                    Password is <strong>required</strong>\r\n                  </mat-error>\r\n                  \r\n                  <button id=\"pbutton\"  mat-icon-button matSuffix (click)=\"hide = !hide\" [attr.aria-label]=\"'Hide password'\" [attr.aria-pressed]=\"hide\">\r\n                  <mat-icon id=\"pIcon\">{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n                  </button>\r\n                  \r\n                </mat-form-field>\r\n                <br/>\r\n                <a href=\"#\" id=\"forgot\">Forgot your password?</a>\r\n              <div class=\"form-group\" >\r\n                <button id=\"login\" class=\"btn btn-primary\" [disabled]=\"form.get('username').invalid || form.get('password').invalid\" type=\"submit\" >Login</button><br><br>\r\n                <p *ngIf=\"buttonLogin != '' && !_match\" class=\"alert alert-danger\"> \r\n                  Invalid Username or Password !              \r\n                </p> \r\n               <p id=\"accountLink\">don't have an account? <a id=\"registerlink\"   (click)=\"register()\">{{tab}}</a></p> \r\n              </div>\r\n             \r\n              </form>\r\n            <!-- </div> -->\r\n            \r\n          </div>\r\n          <div *ngSwitchCase=\"'register'\">\r\n            <!-- <div class=\"px-2\"> -->\r\n              <form  [formGroup]=\"registerForm\" >\r\n                <div class=\"form-row\">  \r\n                  <div class=\"form-group col-md-6\">  \r\n                    <label for=\"firstname\">First Name</label>  \r\n                    <input id=\"firstname\" type=\"text\" placeholder=\"First Name\" formControlName=\"firstname\">\r\n                    <p *ngIf=\"registerForm.get('firstname').touched && registerForm.get('firstname').invalid\" style=\"color: red;\">  \r\n                      First Name is Required!             \r\n                    </p>  \r\n                  </div>\r\n                  <div class=\"form-group col-md-6\">  \r\n                    <label for=\"lastname\">Last Name</label>  \r\n                    <input id=\"lastname\" type=\"text\" placeholder=\"Last Name\" formControlName=\"lastname\">\r\n                    <p *ngIf=\"registerForm.get('lastname').touched && registerForm.get('lastname').invalid\" style=\"color: red;\">  \r\n                      Last Name is Required!             \r\n                    </p>  \r\n                  </div> \r\n                  <div class=\"form-group col-md-6\">  \r\n                    <label for=\"userID\">User I.D</label>  \r\n                    <input id=\"userID\" type=\"text\" placeholder=\"202010\" formControlName=\"userID\">\r\n                    <p *ngIf=\"registerForm.get('userID').touched && registerForm.get('userID').invalid\" style=\"color: red;\">  \r\n                      User I.D is Required!             \r\n                    </p>  \r\n                  </div> \r\n                  <div class=\"form-group col-md-6\">  \r\n                    <label for=\"officeID\">Office Room No.</label>  \r\n                    <input id=\"officeID\" type=\"text\" placeholder=\"1\" formControlName=\"officeID\">\r\n                    <p *ngIf=\"registerForm.get('officeID').touched && registerForm.get('officeID').invalid\" style=\"color: red;\">  \r\n                      Office Room I.D is Required!             \r\n                    </p>\r\n                  </div>  \r\n                  <div class=\"form-group col-md-12\">  \r\n                    <label for=\"email\">Email</label><br>\r\n                    <input id=\"email\" type=\"text\" placeholder=\"user@manager\" formControlName=\"email\">\r\n                    <p *ngIf=\"registerForm.get('email').touched && registerForm.get('email').invalid\" style=\"color: red;\">  \r\n                      Email is Required!             \r\n                    </p>  \r\n                  </div>\r\n                  <div class=\"form-group col-md-12\">\r\n                    <button class=\"btn btn-primary\" [disabled]=\"registerForm.get('firstname').invalid || registerForm.get('lastname').invalid || registerForm.get('email').invalid || registerForm.get('officeID').invalid\" type=\"submit\" >Submit</button><br><br>\r\n                    <p *ngIf=\"buttonReg != '' && _exist\" class=\"alert alert-danger\"> \r\n                    User I.D already exists!           \r\n                    </p> \r\n                  </div>\r\n                </div>\r\n              </form>\r\n            <!-- </div> -->\r\n          </div>\r\n        </div>\r\n      <!-- </div> -->\r\n    </div>\r\n  <!-- </section> -->\r\n<!-- </body> -->\r\n  ","import { BrowserModule } from '@angular/platform-browser'\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatDialogModule} from '@angular/material/dialog';\r\nimport { MatSelectModule} from '@angular/material/select';\r\nimport { MatFormFieldModule} from '@angular/material/form-field';\r\nimport {MatCheckboxModule} from '@angular/material/checkbox';\r\n// import {c} from '@angular/material/checkbox';\r\nimport {MatInputModule} from '@angular/material/input';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport {MatIconModule} from '@angular/material/icon';\r\nimport {MatButtonModule} from '@angular/material/button';\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [\r\n    CommonModule,\r\n    MatSelectModule,\r\n    MatDialogModule,\r\n    MatCheckboxModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    BrowserAnimationsModule,\r\n    BrowserModule,\r\n    MatIconModule,\r\n    MatButtonModule\r\n  ],\r\n  exports:[\r\n    MatSelectModule,\r\n    MatDialogModule,\r\n    MatCheckboxModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    BrowserAnimationsModule,\r\n    BrowserModule,\r\n    MatIconModule,\r\n    MatButtonModule\r\n  ]\r\n})\r\nexport class MaterialModule { }","import { Component, OnInit } from '@angular/core';\r\nimport { apiService } from '../services/api.service';\r\nimport { Meeting } from '../classes/meeting';\r\n\r\n@Component({\r\n  selector: 'app-meeting-info',\r\n  templateUrl: './meeting-info.component.html',\r\n  styleUrls: ['./meeting-info.component.css']\r\n})\r\nexport class MeetingInfoComponent implements OnInit {\r\n\r\n  constructor(private apiDB: apiService) { }\r\n  listMeetings: Meeting[];\r\n  ngOnInit(): void {\r\n    console.log(\"OnInitial\");\r\n    // if(this.listMeetings == undefined)\r\n    // {\r\n      this.apiDB.getMeetings()\r\n    .subscribe (\r\n      data=>{\r\n       this.listMeetings=data;//type casting into the  form listed in user.ts\r\n       console.log('Response2', data);\r\n      }\r\n\r\n    );\r\n    // }\r\n  }\r\n\r\n  newList: Meeting[] = [];\r\n  myMeetings()\r\n  {\r\n    console.log(\"myMeetings\");\r\n    var user = localStorage.getItem('username');\r\n    // var user = \"kg\";\r\n    console.log(\"Username =\" + user);\r\n    this.newList = [];\r\n    this.listMeetings.forEach(element => {\r\n      console.log(element.Organizer);\r\n      var found = element.Organizer.includes(user)\r\n      console.log(found);\r\n\r\n      if(found)\r\n      {\r\n        this.newList.push(element);\r\n        console.log(this.newList);\r\n        \r\n      }\r\n      this.listMeetings = [];\r\n      this.listMeetings = this.newList;\r\n    });\r\n  }\r\n\r\n}\r\n","<h2>Meeting Information</h2>\r\n<div >\r\n    <div id=\"create\">\r\n        <button class=\"btn btn-primary\" id=\"button-create\" (click)=\"myMeetings()\">View my meetings</button>\r\n    </div>\r\n    <div class=\"table-wrapper-scroll-y table-wrapper-scroll-x my-custom-scrollbar\">\r\n        <table class=\"table center tableRoom\">\r\n            <tr>\r\n                <!-- <th>Meeting ID</th> -->\r\n                <th>Start Time</th>\r\n                <th>End Time</th>\r\n                <th>Organizer</th>\r\n                <th>Participants</th>\r\n                <th>Amenities</th>\r\n                <th>Meeting Room</th>\r\n                <!-- <th>#</th> -->\r\n            </tr>\r\n            <tr *ngFor=\"let meeting of listMeetings\">\r\n                <!-- <td attr.class=\"{{meeting.MeetingID}}\">{{meeting.MeetingID}}</td> -->\r\n                <td attr.class=\"{{meeting.StartTime}}\">{{meeting.StartTime}}</td>\r\n                <td attr.class=\"{{meeting.EndTime}}\">{{meeting.EndTime}}</td>\r\n                <td attr.class=\"{{meeting.Organizer}}\">{{meeting.Organizer}}</td>\r\n                <td attr.class=\"{{meeting.Participants}}\">\r\n                   <ul *ngFor=\"let P of meeting.Participants\"> \r\n                    <li>{{P}}</li>\r\n                   </ul> \r\n                   <!-- {{meeting.Participants}} -->\r\n                </td>\r\n                <td attr.class=\"{{meeting.OriginalAmenity}}\">{{meeting.OriginalAmenity}}</td>\r\n                <td attr.class=\"{{meeting.RoomID}}\">{{meeting.RoomID}}</td>\r\n                <!-- <td></td> -->\r\n                <td>\r\n                    <!-- <button class=\"btn btn-danger\" >Delete</button>&nbsp;\r\n                    <button class=\"btn btn-success\" (click)=\"edit(user.FirstName,user.LastName,user.EmpEmail,user.LocationID,user.EmpPassword)\">Edit</button>\r\n                    <button class=\"btn btn-primary\" >Assign Admin</button>&nbsp; -->\r\n                </td>\r\n            </tr>\r\n        \r\n        </table>\r\n    </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-register-confirm',\r\n  templateUrl: './register-confirm.component.html',\r\n  styleUrls: ['./register-confirm.component.css']\r\n})\r\nexport class RegisterConfirmComponent implements OnInit {\r\n\r\n  constructor(private _router: Router,public dialogRef:MatDialogRef<RegisterConfirmComponent>) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n  submit()\r\n  {\r\n    this._router.navigate(['login']);\r\n  }\r\n\r\n}\r\n","<div class=\"wrapper\">\r\n    <p>You have been registered! You can now log in.</p>\r\n    <button class =\"btn btn-primary\" (click)=\"submit()\">Ok</button>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport {FormGroup,FormControl,Validators} from '@angular/forms';\r\nimport { apiService } from '../services/api.service';\r\nimport { User } from '../classes/user';\r\nimport { Router } from '@angular/router';\r\nimport { MatDialog,MatDialogRef, MatDialogConfig } from '@angular/material/dialog';\r\nimport { RegisterConfirmComponent } from '../register-confirm/register-confirm.component';\r\n\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.css']\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n\r\n  constructor(private _apiService: apiService, private _router: Router,private dialog:MatDialog,public dialogRef:MatDialogRef<RegisterComponent>) { }\r\n\r\n  floorNumbers: string[] = ['1','2','3','4'];\r\n  buildingList: string[] = ['A','B','C','D'];\r\n  registerForm = new FormGroup({  \r\n    roomNum: new FormControl('', Validators.required),\r\n    firstname: new FormControl('', Validators.required),  \r\n    lastname: new FormControl('', Validators.required),\r\n    email: new FormControl('', Validators.required),\r\n    password: new FormControl('', Validators.required),\r\n    floorNumber:new FormControl(''),\r\n    building:new FormControl(''),\r\n    distance: new FormControl('',[Validators.required,Validators.pattern(\"^[0-9]*$\")])\r\n    // submit: new FormControl()\r\n  });\r\n  get roomID() {  \r\n    return this.registerForm.get('roomID');  \r\n  } \r\n  get firstname() {  \r\n    return this.registerForm.get('firstname');  \r\n  } \r\n  get lastname() {  \r\n    return this.registerForm.get('lastname');  \r\n  } \r\n  get email() {  \r\n    return this.registerForm.get('email');  \r\n  } \r\n  get password() {  \r\n    return this.registerForm.get('password');  \r\n  } \r\n\r\n  users:User[];\r\n\r\n  ngOnInit(): void {\r\n    console.log(\"getting users\");\r\n    this._apiService.getUsers()\r\n    .subscribe\r\n    (\r\n      data=>\r\n      {\r\n          this.users = data;//typecast data to list of comments \r\n          \r\n          console.log(this.users);\r\n      }\r\n    )\r\n  }\r\n\r\n  buttonReg = \"\";\r\n  _exist = false;\r\n  onRegister()\r\n  {\r\n    \r\n    //check if user already exists\r\n    for(let i = 0; i < this.users.length; i++) \r\n    {\r\n      \r\n      if(this.users[i].EmpEmail == this.registerForm.get('email').value)\r\n      {\r\n        this._exist = true;\r\n      }\r\n    }\r\n\r\n    if(!this._exist)\r\n    {\r\n      var formData=new User();\r\n        // \r\n        formData.FirstName=this.registerForm.get('firstname').value;\r\n        formData.LastName=this.registerForm.get('lastname').value;\r\n        formData.EmpEmail=this.registerForm.get('email').value;\r\n        formData.EmpPassword=this.registerForm.get('password').value;\r\n        \r\n        formData.isAdmin = false;\r\n        var rID = (<string><any>this.registerForm.get('floorNumber').value).concat(<string><any>this.registerForm.get('building').value);\r\n        rID = rID.concat(<string><any>this.registerForm.get('roomNum').value);\r\n        var dist = <number><any>this.registerForm.get('distance').value\r\n        formData.LocationID= rID;\r\n        formData.Distance= dist;\r\n        console.log(rID + \"--\" + dist);\r\n\r\n        // console.log(formData.userID + \" - \" + formData.firstName + \" - \" + formData.lastName + \" - \" + formData.email);\r\n        this._apiService.registerUser(formData)\r\n        .subscribe(\r\n          data=>{\r\n            console.log('Response post', data);\r\n            this.done();\r\n          }\r\n        );\r\n        //console.warn(this.RoomInfo.value)\r\n        //console.log(this.RoomInfo.controls['RoomNumber'].value);//individual values\r\n        //from here send json format to the DB\r\n        this.cancel();\r\n    }\r\n    this.buttonReg =\"clicked\";\r\n  }\r\n  cancel(){\r\n    this.dialogRef.close();\r\n  }\r\n  done()\r\n  {\r\n    this.dialogRef.close();\r\n    const editDialog=new MatDialogConfig();\r\n    editDialog.backdropClass=\"backGround\";\r\n    this.dialog.open(RegisterConfirmComponent,editDialog);\r\n  }\r\n}\r\n","\r\n    <!-- <div class=\"px-2\"> class=\"form-row\"-->\r\n      <form  [formGroup]=\"registerForm\" (ngSubmit)=\"onRegister()\">\r\n        <div class=\"wrapper\">  \r\n            <mat-form-field color=\"accent\" class=\"field\">\r\n                <mat-label>First Name</mat-label>\r\n                <input formControlName=\"firstname\" matInput required>\r\n                <!-- mat-error is for validation -->\r\n                <mat-error *ngIf=\"registerForm.get('firstname').touched && registerForm.get('firstname').invalid\">\r\n                    First Name is <strong>required</strong>\r\n                </mat-error>\r\n            </mat-form-field>\r\n            &nbsp;&nbsp;\r\n            <mat-form-field color=\"accent\" class=\"field\">\r\n                <mat-label>Last Name</mat-label>\r\n                <input formControlName=\"lastname\" matInput required>\r\n                <!-- mat-error is for validation -->\r\n                <mat-error *ngIf=\"registerForm.get('lastname').touched && registerForm.get('lastname').invalid\">\r\n                    Last Name is <strong>required</strong>\r\n                </mat-error>\r\n            </mat-form-field>   \r\n            <br/>\r\n            <mat-form-field color=\"accent\" class=\"field\">\r\n                <mat-label>Email</mat-label>\r\n                <input formControlName=\"email\" matInput required>\r\n                <!-- mat-error is for validation -->\r\n                <mat-error *ngIf=\"registerForm.get('email').touched && registerForm.get('email').invalid\">\r\n                    Email is <strong>required</strong>\r\n                </mat-error>\r\n            </mat-form-field>\r\n            &nbsp;&nbsp;\r\n            <mat-form-field color=\"accent\" class=\"field\">\r\n                <mat-label>Password</mat-label>\r\n                <input formControlName=\"password\" matInput required>\r\n                <!-- mat-error is for validation -->\r\n                <mat-error *ngIf=\"registerForm.get('password').touched && registerForm.get('password').invalid\">\r\n                    Password is <strong>required</strong>\r\n                </mat-error>\r\n            </mat-form-field>\r\n            <br/>\r\n            <mat-form-field color=\"accent\">\r\n                <mat-label>Floor Number</mat-label>\r\n                <mat-select formControlName=\"floorNumber\">\r\n                  <mat-option style=\"color:black\" *ngFor=\"let floors of floorNumbers\" [value]=\"floors\" >{{floors}}</mat-option>\r\n                </mat-select>\r\n            </mat-form-field>\r\n            &nbsp;&nbsp;\r\n            <mat-form-field color=\"accent\">\r\n                <mat-label>Building number</mat-label>\r\n                <mat-select formControlName=\"building\">\r\n                  <mat-option style=\"color:black\" *ngFor=\"let buildingNo of buildingList\" [value]=\"buildingNo\" >{{buildingNo}}</mat-option>\r\n                </mat-select>\r\n              </mat-form-field>\r\n            <br>\r\n            <mat-form-field color=\"accent\" class=\"field\">\r\n                <mat-label>Room/Cubicle Number</mat-label>\r\n                <input formControlName=\"roomNum\" matInput required>\r\n                <!-- mat-error is for validation -->\r\n                <mat-error *ngIf=\"registerForm.get('roomNum').touched && registerForm.get('roomNum').invalid\">\r\n                    Room/Cubicle Number is <strong>required</strong>\r\n                </mat-error>\r\n                <mat-error *ngIf=\"registerForm.controls['roomNum'].hasError('pattern')\">\r\n                    please enter a valid integer\r\n                  </mat-error>\r\n            </mat-form-field>\r\n            &nbsp;&nbsp;\r\n            <mat-form-field color=\"accent\">\r\n                <mat-label>Distance from elevator(in meters)</mat-label>\r\n                <input formControlName=\"distance\" matInput>\r\n                <mat-error *ngIf=\"registerForm.controls['distance'].hasError('required')\">\r\n                  Distance is <strong>required</strong>\r\n                </mat-error>\r\n                <mat-error *ngIf=\"registerForm.controls['distance'].hasError('pattern')\">\r\n                  please enter a valid integer\r\n                </mat-error>\r\n              </mat-form-field>\r\n            <!-- <mat-form-field color=\"accent\" class=\"field\">\r\n                <mat-label>Office Room No.</mat-label>\r\n                <input formControlName=\"officeID\" matInput required>\r\n                <mat-error *ngIf=\"registerForm.get('officeID').touched && registerForm.get('officeID').invalid\">\r\n                    Office Room No. is <strong>required</strong>\r\n                </mat-error>\r\n            </mat-form-field> -->\r\n            <div class=\"form-group col-md-12\">\r\n                <button class=\"btn btn-primary\" [disabled]=\"registerForm.get('firstname').invalid || registerForm.get('lastname').invalid || registerForm.get('email').invalid || registerForm.get('password').invalid\" type=\"submit\" >Submit</button>\r\n                &nbsp;&nbsp;\r\n                <button id=\"cancel\" class =\"btn btn-danger\" (click)=\"cancel()\">cancel</button>\r\n                <br/><br/>\r\n                <p *ngIf=\"buttonReg != '' && _exist\" class=\"alert alert-danger\"> \r\n                    User with username already exists!           \r\n                </p> \r\n            </div>\r\n        </div>\r\n      </form>\r\n    <!-- </div> -->\r\n \r\n","import { MatDialog,MatDialogConfig } from '@angular/material/dialog';\r\nimport { Component, OnInit, AfterViewInit, ViewChild, Renderer2 } from '@angular/core';\r\nimport { apiService } from '../services/api.service';\r\nimport { roomsService } from '../services/rooms.service';\r\nimport {Room} from '../classes/room';\r\nimport { AddMeetingRoomInfoComponent } from '../add-meeting-room-info/add-meeting-room-info.component';\r\nimport { EditMeetingRoomInfoComponent } from '../edit-meeting-room-info/edit-meeting-room-info.component';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-retrieve-meeting-room-info',\r\n  templateUrl: './retrieve-meeting-room-info.component.html',\r\n  styleUrls: ['./retrieve-meeting-room-info.component.css']\r\n})\r\nexport class RetrieveMeetingRoomInfoComponent implements OnInit,AfterViewInit {\r\n  @ViewChild('data') data;\r\n  constructor(private _router: Router,private apiDB: apiService, private dialog:MatDialog, private renderer2:Renderer2, private mRoom:roomsService) { }\r\n  //constructor(private apiDB: apiService, private renderer2:Renderer2) { }\r\n  \r\n  get getRoom():Room\r\n  {\r\n    return this.mRoom.myRoom;\r\n  }\r\n  set setRoom(_room:Room)\r\n  {\r\n    this.mRoom.myRoom = _room;\r\n  }\r\n  listComments:Room[];\r\n  ngOnInit(): void {\r\n    if(localStorage.getItem('loggedIn') == \"false\")\r\n    {\r\n      //this._router.navigate(['login']);\r\n    }\r\n    this.apiDB.getRooms()\r\n    .subscribe (\r\n      data=>{\r\n       this.listComments=data;//type casting into the  form listed in comments.ts\r\n       console.log('Response2', data);\r\n      }\r\n\r\n    );\r\n  }\r\n  ngAfterViewInit(){\r\n    console.log(this.data.nativeElement);\r\n    //this.renderer2.appendChild(this.data.nativeElement,this.renderer2.createText(\"testing\"));\r\n  }\r\n  edit(id:string,floorNum:number,amenities:string,numParticipants:number,roomName:string,is_External:boolean,Building:number,Whiteboard:boolean,Projector:boolean,Monitor:boolean,is_Available:boolean)\r\n  {\r\n    var formData=new Room();\r\n    formData.RoomID = id;\r\n    formData.FloorNumber = floorNum;\r\n    formData.Amenity = amenities;\r\n    formData.maxSeats = numParticipants;\r\n    formData.RoomName = roomName;\r\n    formData.isExternal = is_External;\r\n    formData.Building = Building;\r\n    formData.Whiteboard = Whiteboard;\r\n    formData.Projector = Projector;\r\n    formData.Monitor = Monitor;\r\n    // formData.isAvailable = is_Available;\r\n    console.log(formData);\r\n    this.setRoom = formData;\r\n    // this.apiDB.getRecord(formData)\r\n    // .subscribe(\r\n    //   data=>{\r\n    //     console.log('Response post', data);\r\n    //   });\r\n        //window.location.reload();\r\n        //this.ngOnInit();\r\n    const editDialog=new MatDialogConfig();\r\n    editDialog.backdropClass=\"backGround\";\r\n    // configDialog.width='700px';\r\n    // configDialog.height='400px';\r\n    this.dialog.open(EditMeetingRoomInfoComponent,editDialog);\r\n  }\r\n  delete(id:string){\r\n    if(confirm(`Are you sure to delete Room number ${id}`)) {\r\n      console.log(\"Implement delete functionality here\");\r\n      var formData=new Room();\r\n      formData.RoomID=id;\r\n      this.apiDB.delete(formData)\r\n      .subscribe(\r\n        data=>{\r\n          console.log('Response post', data);\r\n        });\r\n        //window.location.reload();\r\n        this.ngOnInit();\r\n    }\r\n  }\r\n\r\n  onCreate(){\r\n    const configDialog=new MatDialogConfig();\r\n    configDialog.backdropClass=\"backGround\";\r\n    // configDialog.width='700px';\r\n    // configDialog.height='400px';\r\n    this.dialog.open(AddMeetingRoomInfoComponent,configDialog);\r\n    // window.location.reload();\r\n    this.ngOnInit();\r\n  }\r\n}\r\n","\r\n<h2>Meeting Room Information</h2>\r\n<div #data>\r\n    <div id=\"create\">\r\n        <button class=\"btn btn-primary\" (click)=\"onCreate()\" id=\"button-create\">Add new Room</button>\r\n    </div>\r\n    <div class=\"table-wrapper-scroll-y my-custom-scrollbar\">\r\n        <table class=\"table  tableRoom\">\r\n            <tr>\r\n                <th>Room number</th>\r\n                <th>Room Name</th>\r\n                <th>Floor Number</th>\r\n                <th>Amenity</th>\r\n                <th>Number of seats</th>\r\n                <th>#</th>\r\n            </tr>\r\n            <tr *ngFor=\"let com of listComments\">\r\n                <td attr.class=\"{{com.RoomID}}\">{{com.RoomID}}</td>\r\n                <td attr.class=\"{{com.RoomName}}\">{{com.RoomName}}</td>\r\n                <td attr.class=\"{{com.FloorNumber}}\">{{com.FloorNumber}}</td>\r\n                <td attr.class=\"{{com.Amenity}}\">{{com.Amenity}}</td>\r\n                <td attr.class=\"{{com.maxSeats}}\">{{com.maxSeats}}</td>\r\n                <!-- <td></td> -->\r\n                <td>\r\n                    <button class=\"btn btn-danger\" (click)=\"delete(com.RoomID)\">Delete</button>&nbsp;\r\n                    <!-- <button class=\"btn btn-success\" (click)=\"edit(com.RoomID,com.FloorNumber,com.Amenity,com.maxSeats,com.RoomName,com.isExternal,com.Building,com.Whiteboard,com.Projector,com.Monitor,com.isAvailable)\">Edit</button> -->\r\n                </td>\r\n            </tr>\r\n        \r\n        </table>\r\n    </div>\r\n</div>\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpClientModule, HttpClient } from '@angular/common/http';\r\nimport {Room} from '../classes/room';\r\nimport { User } from '../classes/user';\r\n\r\n@Injectable()\r\nexport class apiService\r\n{\r\n    constructor(private httpclient: HttpClient){}\r\n    getcomments(): Observable<any>\r\n    {\r\n        let body={\r\n            table:\"Admins\",\r\n            request:\"view\",\r\n            data:\"\"\r\n        };\r\n        return this.httpclient.post(\"http://localhost:65000/\",body); \r\n    }\r\n    getUsers(): Observable<any>\r\n    {\r\n        console.log(\"ts in getusers\");\r\n        let body={\r\n            table:\"EmployeeDetails\",\r\n            request:\"view\",\r\n            data:\"\"\r\n        };\r\n        return this.httpclient.post(\"http://localhost:65000/\",body); \r\n    }\r\n    getRooms(): Observable<any>\r\n    {\r\n        let body={\r\n            table:\"FloorPlan\",\r\n            request:\"view\",\r\n            data:\"\"\r\n        };\r\n        return this.httpclient.post(\"http://localhost:65000/\",body); \r\n    }\r\n    getMeetings(): Observable<any>\r\n    {\r\n        let body={\r\n            table:\"Meetings\",\r\n            request:\"view\",\r\n            data:\"\"\r\n        };\r\n        return this.httpclient.post(\"http://localhost:65000/\",body); \r\n    }\r\n\r\n    post(postedData:Room):Observable<any>\r\n    {\r\n       let obj={\r\n            table:\"FloorPlan\",\r\n            request:\"create\",\r\n            data:postedData\r\n        };\r\n        console.log(\"posted data \",obj);\r\n        return this.httpclient.post(\"http://localhost:65000/\",obj);\r\n    }\r\n    registerUser(postedData:User):Observable<any>\r\n    {\r\n       let obj={\r\n            table:\"EmployeeDetails\",\r\n            request:\"create\",\r\n            data:postedData\r\n        };\r\n        console.log(\"posted data \",obj);\r\n        return this.httpclient.post(\"http://localhost:65000/\",obj);\r\n    }\r\n\r\n    getRecord(postedData:Room):Observable<any>{\r\n\r\n        let obj={\r\n            table:\"FloorPlan\",\r\n            request:\"read\",\r\n            data:postedData\r\n        };\r\n        return this.httpclient.post(\"http://localhost:65000/\",obj);\r\n    }\r\n    delete(postedData:Room):Observable<any>{\r\n\r\n        let obj={\r\n            table:\"FloorPlan\",\r\n            request:\"delete\",\r\n            data:postedData\r\n        };\r\n        return this.httpclient.post(\"http://localhost:65000/\",obj);\r\n    }\r\n\r\n    deleteUser(postedData:User):Observable<any>{\r\n\r\n        let obj={\r\n            table:\"EmployeeDetails\",\r\n            request:\"delete\",\r\n            data:postedData\r\n        };\r\n        return this.httpclient.post(\"http://localhost:65000/\",obj);\r\n    }\r\n\r\n    updateRoom(postedData:Room):Observable<any>{\r\n        \r\n        let obj={\r\n            table:\"FloorPlan\",\r\n            request:\"update\",\r\n            data:postedData\r\n        };\r\n        return this.httpclient.post(\"http://localhost:65000/\",obj);\r\n    }\r\n\r\n    updateEmployee(postedData:User):Observable<any>{\r\n        \r\n        let obj={\r\n            table:\"EmployeeDetails\",\r\n            request:\"update\",\r\n            data:postedData\r\n        };\r\n        return this.httpclient.post(\"http://localhost:65000/\",obj);\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\nimport {User} from '../classes/user';\r\n\r\n@Injectable()\r\nexport class empService\r\n{\r\n    myUser: User;\r\n    constructor(){}\r\n}","import { Injectable } from '@angular/core';\r\nimport {Room} from '../classes/room';\r\n\r\n@Injectable()\r\nexport class roomsService\r\n{\r\n    myRoom: Room;\r\n    constructor(){}\r\n}","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"]}